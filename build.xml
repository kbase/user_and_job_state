<project name="User and Job State Service" default="test" basedir=".">

  <description>
      Build file for the User and Job State Service
  </description>

  <!-- set global properties for this build -->
  <property name="package" value="user and job state service"/>
  <property name="src" location="src"/>
  <property name="lib" location="lib"/>
  <property name="dist" location="dist"/>
  <property name="test" location="test"/>
  <property name="jardir" location="../jars/lib/jars/"/>
  <property name="doc_server_doc_loc" location="/server_docs"/>
  <property name="classes" location="classes"/>
  <property name="doc" location="docs/javadoc"/>
  <property name="tempunpack" location="unpackedjars"/>
  <property name="jar.file" value="UserAndJobStateService.jar"/>
  <property name="war.file" value="UserAndJobStateService.war"/>
  <property name="clientjar.file" value="UserAndJobStateClient.jar"/>
  <property name="war.dir" value="war"/>

  <!--
   set user, pwd, token for the 2 users to nothing so ommitted properties
   won't be set as ${test.user2} or whatever. Properties are immutable so
   this won't overwrite already set properties
   -->
  <property name="test.user1" value="" />
  <property name="test.user2" value="" />
  <property name="test.pwd1" value="" />
  <property name="test.pwd2" value="" />
  <property name="test.token1" value="" />
  <property name="test.token2" value="" />

  <fileset dir="${jardir}" id="sourceslib">
    <include name="kbase/common/kbase-common-0.0.20.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="serverlib">
    <include name="ini4j/ini4j-0.5.2.jar"/>
    <include name="jetty/jetty-all-7.0.0.jar"/>
    <include name="jna/jna-3.4.0.jar"/>
    <include name="servlet/servlet-api-2.5.jar"/>
    <include name="syslog4j/syslog4j-0.9.46.jar"/>
    <include name="joda/joda-time-2.2.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="clientserverlib">
    <include name="junit/junit-4.9.jar"/>
    <include name="kbase/auth/kbase-auth-0.4.1.jar"/>
    <include name="jackson/jackson-annotations-2.2.3.jar"/>
    <include name="jackson/jackson-core-2.2.3.jar"/>
    <include name="jackson/jackson-databind-2.2.3.jar"/>
    <include name="kbase/common/kbase-common-0.0.20.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="applicationlib">
    <include name="bson4jackson/bson4jackson-2.2.0-2.2.0.jar"/>
    <include name="jongo/jongo-0.5-early-20130912-1506.jar"/>
    <include name="mongo/mongo-java-driver-2.13.3.jar"/>
    <include name="apache_commons/commons-lang3-3.1.jar"/>
    <include name="slf4j/slf4j-api-1.7.7.jar"/>
    <include name="logback/logback-classic-1.1.2.jar"/>
    <include name="logback/logback-core-1.1.2.jar"/>
    <include name="apache_commons/commons-logging-1.1.1.jar"/>
    <include name="jcommander/jcommander-1.48.jar"/>
    <include name="kbase/workspace/WorkspaceService-0.5.0-dev6.jar" />
    <include name="apache_commons/http/httpcore-4.3.jar"/>
    <include name="apache_commons/http/httpclient-4.3.1.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="testlib">
    <include name="apache_commons/commons-io-2.4.jar"/>
    <include name="apache_commons/commons-collections-3.2.1.jar"/>
    <include name="apache_commons/commons-lang-2.4.jar"/>
  </fileset>

  <fileset dir="${jardir}" id="workspacelib">
    <include name="google/guava-14.0.1.jar"/>
    <include name="kbase/kidl/kbase-kidl-parser-1409261812-7863aef.jar"/>
  </fileset>
	
  <union id="serverside">
    <fileset refid="serverlib"/>
    <fileset refid="clientserverlib"/>
    <fileset refid="applicationlib"/>
    <fileset refid="testlib"/>
    <fileset refid="workspacelib"/>
  </union>

  <fileset id="client-jdoc-files" dir="${src}/us/kbase" defaultexcludes="yes">
      <include name="userandjobstate/*.java"/>
      <exclude name="userandjobstate/UserAndJobStateServer.java"/>
      <include name="common/service/*.java"/>
      <exclude name="common/service/JsonServer*"/>
      <exclude name="common/service/JsonTreeTraversingParser.java"/>
      <exclude name="common/service/KBaseJsonParser.java"/>
      <exclude name="common/service/JacksonTupleModule.java"/>
      <exclude name="common/service/JsonClientCaller.java"/>
  </fileset>

  <fileset id="sources-jdoc-files" dir="${tempunpack}/us/kbase/common/service"
    defaultexcludes="yes">
    <include name="UObject.java"/>
    <include name="JsonTokenStream.java"/>
    <include name="*Exception.java"/>
  </fileset>

  <fileset id="client-class-files" dir="${classes}" defaultexcludes="yes">
    <include name="us/kbase/userandjobstate/*.class"/>
    <exclude name="us/kbase/userandjobstate/UserAndJobState.class"/>
    <include name="us/kbase/common/service/*.class"/>
    <exclude name="us/kbase/common/service/JsonServer*"/>
  </fileset>

  <path id="compile.classpath">
    <union refid="serverside"/>
  </path>

  <path id="test.client.import.classpath">
    <fileset refid="clientserverlib"/>
    <fileset file="${dist}/client/${clientjar.file}"/>
    <pathelement path="${test}"/>
  </path>

  <path id="test.classpath">
    <path refid="compile.classpath"/>
    <fileset file="${dist}/${jar.file}"/>
  </path>

  <target name="init" description="make directories">
    <!-- Create the output directory structure-->
    <mkdir dir="${classes}"/>
    <mkdir dir="${dist}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile class files-->
    <javac destdir="${classes}" includeantruntime="false"
      debug="true" classpathref="compile.classpath">
      <src path="${src}"/>
    </javac>
    <!-- Copy resource files-->
      <copy todir="${classes}">
        <fileset dir="${src}">
          <patternset>
            <include name="**/*.cfg"/>
            <include name="**/*.py"/>
            <include name="**/*.html"/>
          </patternset>
        </fileset>
      </copy>
    <!-- Make main jar file-->
    <jar destfile="${dist}/${jar.file}" basedir="${classes}"/>
    <!-- make the client jar-->
    <jar destfile="${dist}/client/${clientjar.file}">
      <fileset refid="client-class-files"/>
    </jar>
  </target>

  <target name="buildwar" description="build the WAR file. Assumes compile has been run">
    <!-- make the war file for the server-->
    <mkdir dir="${war.dir}/lib"/>
    <copy todir="${war.dir}/lib/" flatten="true">
      <union refid="serverside"/>
    </copy>
    <mkdir dir="ujs_docs/${doc_server_doc_loc}"/>
    <copy todir="ujs_docs/${doc_server_doc_loc}">
      <fileset dir="docs"/>
    </copy>
    <war destfile="${dist}/${war.file}" webxml="${war.dir}/web.xml">
      <classes dir="${classes}"/>
      <classes dir="ujs_docs"/>
      <lib dir="${war.dir}/lib/"/>
    </war>
    <!-- Remove uncompressed class files and libs-->
    <delete dir="${war.dir}/lib"/>
    <delete dir="ujs_docs"/>
  </target>

  <target name="javadoc" description="build javadocs">
    <unzip dest="${tempunpack}">
      <fileset refid="sourceslib"/>
    </unzip>
    <javadoc access="protected" author="false" classpathref="compile.classpath"
      destdir="${doc}" nodeprecated="false" nodeprecatedlist="false"
      noindex="false" nonavbar="false" notree="false"
      source="1.7" splitindex="true" use="true" version="true">
      <link href="http://download.oracle.com/javase/7/docs/api/"/>
      <link href="http://fasterxml.github.io/jackson-core/javadoc/2.2.0/"/>
      <link href="http://fasterxml.github.io/jackson-databind/javadoc/2.2.0/"/>
      <fileset refid="client-jdoc-files"/>
      <fileset refid="sources-jdoc-files"/>
    </javadoc>
    <delete dir="${tempunpack}"/>
  </target>

  <target name="test" depends="compile" description="run tests">
    <fail unless="test.auth.url" message="property test.auth.url not set."/>
    <fail unless="test.globus.url" message="property test.globus.url not set."/>
    <fail unless="test.mongo.exe" message="property test.mongo.exe not set."/>
    <fail unless="test.temp.dir" message="property test.temp.dir not set."/>
    <echo message="starting ${package} tests"/>
    <junit failureproperty="test.failed" fork="yes">
      <classpath refid="test.classpath"/>
      <formatter type="plain" usefile="false" />
      <sysproperty key="test.user1" value="${test.user1}"/>
      <sysproperty key="test.pwd1" value="${test.pwd1}"/>
      <sysproperty key="test.token1" value="${test.token1}"/>
      <sysproperty key="test.user2" value="${test.user2}"/>
      <sysproperty key="test.pwd2" value="${test.pwd2}"/>
      <sysproperty key="test.token2" value="${test.token2}"/>
      <sysproperty key="test.auth.url" value="${test.auth.url}" />
      <sysproperty key="test.globus.url" value="${test.globus.url}" />
      <sysproperty key="test.mongo.exe" value="${test.mongo.exe}"/>
      <sysproperty key="test.temp.dir" value="${test.temp.dir}"/>
      <sysproperty key="test.temp.dir.keep" value="${test.temp.dir.keep}"/>
      <test name="us.kbase.userandjobstate.test.jobstate.JobStateTests"/>
      <test name="us.kbase.userandjobstate.test.jobstate.JobResultsTest"/>
      <test name="us.kbase.userandjobstate.test.userstate.UserStateTests"/>
      <test name="us.kbase.userandjobstate.test.kbase.JSONRPCLayerTest"/>
      <test name="us.kbase.userandjobstate.test.kbase.JSONRPCWithWSAuth"/>
      <test name="us.kbase.userandjobstate.test.kbase.WorkspaceAuthTest"/>
      <test name="us.kbase.userandjobstate.test.kbase.PullWSJobWithoutWSTest"/>
      <test name="us.kbase.userandjobstate.test.authorization.AuthorizationTest"/>
      <test name="us.kbase.userandjobstate.test.docserver.DocServerTest"/>
      <test name="us.kbase.common.test.schemamanager.SchemaManagerTest"/>
    </junit>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>
	
  <target name="test_client_import" depends="compile" description="make sure the client jar contains all files">
    <javac destdir="${test}" srcdir="${test}" includeantruntime="false"
          debug="true" classpathref="test.client.import.classpath" />
    <junit failureproperty="test.failed" fork="yes">
      <classpath refid="test.client.import.classpath"/>
      <formatter type="plain" usefile="false" />
      <test name="TestClientImport"/>
    </junit>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>

  <target name="updatescript" depends="compile" description="create script to run DB updater">
    <pathconvert targetos="unix" property="lib.classpath" refid="compile.classpath"/>
    <echo file="./db_update">#!/bin/sh
java -cp ${dist}/${jar.file}:${lib.classpath} us.kbase.userandjobstate.updater.UjsUpdater $@
    </echo>
    <chmod file="./db_update" perm="a+x"/>
  </target>
	
  <target name="clean" description="clean up" >
    <!-- Clean up internal temporary files and folders-->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
    <!--<delete dir="${test}"/>-->
  </target>
</project>

